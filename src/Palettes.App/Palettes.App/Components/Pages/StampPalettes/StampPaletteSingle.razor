@page "/stamp-palettes/{Id:guid}"
@inject AuthenticationStateProvider AuthStateProvider
@inject Services.AuthenticatedTraqHttpClientFactory TraqHttpClientFactory
@inject IOptions<Configurations.TraqClientOptions> TraqClientOptions
@inject IMemoryCache Cache
@inherits AuthenticatedPageBase

@if (StampPalette is not null && StampPaletteCreator is not null)
{
    <h2>@StampPalette.Name</h2>
    <p>by @StampPaletteCreator.Name</p>

    <h3>スタンプ (@(StampPalette.Stamps.Count)個)</h3>
    <span>
        @{
            Traq.Api.StampApi stampApi = new(CreateTraqAuthenticatedHttpClient()!);
            @foreach (var s in StampPalette.Stamps)
            {
                <TraqStampImg TraqApiBaseUrl="@TraqClientOptions.Value.ApiBaseAddress"
                              StampId="@s"
                              StampApi="@stampApi" />
            }
        }
    </span>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    Traq.Model.StampPalette? StampPalette { get; set; }
    Traq.Model.UserDetail? StampPaletteCreator { get; set; }

    Domain.Models.StampPalette? StampPaletteRef { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userClient = await CreateTraqAuthenticatedHttpClientAsync();
        if (userClient is null)
        {
            return;
        }

        Traq.Api.StampApi stampApi = new(userClient);
        Traq.Api.UserApi userApi = new(userClient);
        StampPalette = await stampApi.GetStampPaletteAsync(Id);
        StampPaletteCreator = await userApi.GetCachedUserDetailAsync(Cache, StampPalette.CreatorId, CancellationToken.None);

        await using var repo = await RepositoryFactory.CreateRepositoryAsync(default);
        StampPaletteRef = await repo.TryGetStampPaletteAsync(Id, default);
    }
}
