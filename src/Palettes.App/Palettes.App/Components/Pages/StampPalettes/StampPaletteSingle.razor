@page "/stamp-palettes/{Id:guid}"
@inject AuthenticationStateProvider AuthStateProvider
@inject Services.AuthenticatedTraqHttpClientFactory TraqHttpClientFactory
@inject IOptions<Configurations.TraqClientOptions> TraqClientOptions
@inject IMemoryCache Cache
@inherits AuthenticatedPageBase
@rendermode InteractiveServer

@if (TraqStampPalette is not null && StampPaletteCreator is not null)
{
    <div class="flex flex-col gap-y-6">

        <div class="flex flex-row flex-nowrap gap-x-3 shrink-0 items-center">

            <div class="flex flex-row gap-x-3 grow items-center">
                <h1>@TraqStampPalette.Name</h1>

                @if (StampPalette is not { IsPublic: true })
                {
                    <span class="tx-caption text-default-secondary px-1 py-0.5 border-1 border-default-primary rounded-sm">
                        非公開
                    </span>
                }
            </div>

            @if (TraqStampPalette.CreatorId == LoggedInUserId)
            {
                if (StampPalette is not { IsPublic: true })
                {
                    <Button OnClickCallback="_ => ChangeVisibility(true)">
                        <span class="tx-button">
                            公開する
                        </span>
                    </Button>
                }
                else
                {
                    <Button Type="Button.ButtonType.Danger" OnClickCallback="_ => ChangeVisibility(false)">
                        <span class="tx-button text-inherit">
                            非公開にする
                        </span>
                    </Button>
                }
            }

        </div>

        <div class="flex flex-col gap-4">
            <_PropertyListItem>
                <Label>
                    制作者
                </Label>
                <Value>
                    <div class="flex flex-row gap-x-2 items-center">
                        <span class="size-fit rounded-full overflow-hidden">
                            <TraqUserIcon TraqApiBaseUri="@TraqClientOptions.Value.ApiBaseAddress"
                                          Username="@StampPaletteCreator.Name"
                                          Width="24"
                                          Height="24" />
                        </span>
                        <p>
                            @StampPaletteCreator.Name
                        </p>
                    </div>
                </Value>
            </_PropertyListItem>

            <_PropertyListItem>
                <Label>
                    説明
                </Label>
                <Value>
                    @if (string.IsNullOrWhiteSpace(TraqStampPalette.Description))
                    {
                        <p class="text-default-tertiary">説明なし</p>
                    }
                    else
                    {
                        <div class="flex flex-col gap-y-2">
                            @foreach (var para in ToParagraphs(TraqStampPalette.Description))
                            {
                                <p>
                                    @para
                                </p>
                            }
                        </div>
                    }
                </Value>
            </_PropertyListItem>

            <_PropertyListItem>
                <Label>
                    スタンプ (@(TraqStampPalette.Stamps.Count)個)
                </Label>
                <Value>
                    <div class="flex flex-row flex-wrap gap-1">
                        @{
                            Traq.Api.StampApi stampApi = new(CreateTraqAuthenticatedHttpClient()!);
                            @foreach (var s in TraqStampPalette.Stamps)
                            {
                                <TraqStampImg StampId="@s"
                                              StampApi="@stampApi" />
                            }
                        }
                    </div>
                </Value>
            </_PropertyListItem>

            @if (StampPalette is { IsPublic: true })
            {
                <_PropertyListItem>
                    <Label>
                        お気に入り登録者
                    </Label>
                    <Value>
                        @(StampPalette.Subscribers.Length)人
                    </Value>
                </_PropertyListItem>
            }

            <_PropertyListItem>
                <Label>
                    短縮ID
                </Label>
                <Value>
                    @(SimpleBase.Base58.Bitcoin.Encode(Id.ToByteArray()))
                </Value>
            </_PropertyListItem>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    Traq.Model.StampPalette? TraqStampPalette { get; set; }
    Traq.Model.UserDetail? StampPaletteCreator { get; set; }

    Domain.Models.StampPalette? StampPalette { get; set; }

    Guid LoggedInUserId = Guid.Empty;

    bool ButtonIsEnabled = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var userClient = await CreateTraqAuthenticatedHttpClientAsync();
        if (userClient is null)
        {
            throw new Exception("Failed to create authenticated HTTP client.");
        }

        Traq.Api.StampApi stampApi = new(userClient);
        Traq.Api.UserApi userApi = new(userClient);
        TraqStampPalette = await stampApi.GetStampPaletteAsync(Id);
        StampPaletteCreator = await userApi.GetCachedUserDetailAsync(Cache, TraqStampPalette.CreatorId, CancellationToken.None);

        await using var repo = await RepositoryFactory.CreateRepositoryAsync(default);
        StampPalette = await repo.TryGetStampPaletteAsync(Id, default);

        var loginUserIdClaim = (await AuthStateProvider.GetAuthenticationStateAsync()).User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
        if (loginUserIdClaim is null || !Guid.TryParse(loginUserIdClaim.Value, out var loginUserId))
        {
            throw new Exception("Failed to retrieve the logged-in user's ID.");
        }

        if (StampPalette is not { IsPublic: true })
        {
            if (TraqStampPalette.CreatorId != loginUserId)
            {
                throw new Exception("Permission denied.");
            }
        }

        if (Guid.TryParse(AuthStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult().User.FindFirst(ClaimTypes.NameIdentifier)?.Value, out var id))
        {
            LoggedInUserId = id;
        }
    }

    void ChangeVisibility(bool isPublic)
    {
        if (!Interlocked.Exchange(ref ButtonIsEnabled, false))
        {
            return;
        }

        Task.Run(async () => {
            await using var repo = await RepositoryFactory.CreateRepositoryAsync(default).ConfigureAwait(false);
            var palette = await repo.TryGetStampPaletteAsync(Id, default).ConfigureAwait(false);
            if (palette is null)
            {
                palette = await repo.PostStampPaletteAsync(new Domain.Models.PostStampPaletteRequest(Id, StampPaletteCreator!.Id, isPublic), default).ConfigureAwait(false);
            }
            else
            {
                palette = await repo.UpdateStampPaletteAsync(Id, new Domain.Models.UpdateStampPaletteRequest(isPublic), default).ConfigureAwait(false);
            }
            StampPalette = palette;
        })
        .GetAwaiter().GetResult();

        ButtonIsEnabled = true;
    }

    static IEnumerable<string> ToParagraphs(string text)
    {
        int lineStart = 0;
        int paraStart = 0;
        for (int i = 0; i < text.Length; i++)
        {
            if (text[i] == '\n')
            {
                if (text.AsSpan()[lineStart..i].IsWhiteSpace())
                {
                    yield return text[paraStart..lineStart];
                    paraStart = i + 1;
                }
                lineStart = i + 1;
            }
        }
        yield return text[paraStart..];
        yield break;
    }
}
