@page "/subscriptions"
@inherits AuthenticatedPageBase
@inject IMemoryCache Cache

<PageTitle>Subscriptions | Q-Palettes</PageTitle>

<CascadingTraqApi HttpClient="CreateTraqAuthenticatedHttpClient()">

    <div class="flex flex-col gap-y-6">

        <h2>
            お気に入り
        </h2>

        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-3">
            @foreach (var sub in Subscriptions)
            {
                <StampPaletteLink StampPalette="StampPalettes[sub.StampPaletteId].Item2" />
            }
        </div>

    </div>

</CascadingTraqApi>

@code {
    Domain.Models.StampPaletteSubscription[] Subscriptions = [];
    Dictionary<Guid, (Domain.Models.StampPalette, Traq.Model.StampPalette)> StampPalettes = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = await TryGetTraqUserInfoAsync();
        var client = await CreateTraqAuthenticatedHttpClientAsync();
        if (user is null || client is null)
        {
            return;
        }

        await using var repo = await RepositoryFactory.CreateRepositoryAsync(default);
        Subscriptions = await repo.GetUserStampPaletteSubscriptionsAsync(user.Id, default);

        Traq.Api.StampApi stampApi = new(client);

        foreach (var s in Subscriptions)
        {
            if (!StampPalettes.ContainsKey(s.StampPaletteId))
            {
                var p = repo.GetStampPaletteAsync(s.StampPaletteId, default).AsTask();
                var qp = stampApi.GetCachedStampPaletteAsync(Cache, s.StampPaletteId, default).AsTask();
                await Task.WhenAll(p, qp);
                StampPalettes.Add(s.StampPaletteId, (p.Result, qp.Result));
            }
        }
    }
}
