@page "/"
@inject AuthenticationStateProvider AuthStateProvider
@inject Services.AuthenticatedTraqHttpClientFactory TraqHttpClientFactory
@inject IOptions<Configurations.TraqClientOptions> TraqClientOptions
@inject NavigationManager Navigation
@inject IMemoryCache Cache
@inherits AuthenticatedPageBase

<PageTitle>Home</PageTitle>

<CascadingTraqApi HttpClient="CreateTraqAuthenticatedHttpClient()">
    <div class="flex flex-col gap-y-6">

        <div class="flex flex-col gap-y-2">
            <h2>あなたのスタンプパレット</h2>

            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-3">
                @if (UserStampPalettes is not null)
                {
                    foreach (var sp in UserStampPalettes)
                    {
                        <StampPaletteLink StampPalette="sp" DisplaysCreator="false" />
                    }
                }
            </div>
        </div>

        <div class="flex flex-col gap-y-2">
            <h2>みんなのスタンプパレット</h2>

            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-3">
                @if (PublicStampPalettes is not null)
                {
                    foreach (var sp in PublicStampPalettes)
                    {
                        <StampPaletteLink StampPalette="sp" />
                    }
                }
            </div>
        </div>

    </div>
</CascadingTraqApi>

@code {
    List<Traq.Model.StampPalette>? UserStampPalettes = null;

    List<Traq.Model.StampPalette>? PublicStampPalettes = null;

    Traq.Api.StampApi? TraqStampApi = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var client = await CreateTraqAuthenticatedHttpClientAsync();
        if (client is null)
        {
            return;
        }

        TraqStampApi = new(client);
        UserStampPalettes = await TraqStampApi.GetStampPalettesAsync();

        await using var repo = await RepositoryFactory.CreateRepositoryAsync(default);
        PublicStampPalettes = await (await repo.GetPublicStampPalettesAsync(default))
            .ToAsyncEnumerable()
            .SelectAwait(async p => await TraqStampApi.GetStampPaletteAsync(p.Id))
            .ToListAsync();
    }
}
