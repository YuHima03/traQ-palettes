@page "/"
@inject AuthenticationStateProvider AuthStateProvider
@inject Services.AuthenticatedTraqHttpClientFactory TraqHttpClientFactory
@inject IOptions<Configurations.TraqClientOptions> TraqClientOptions
@inject NavigationManager Navigation
@inject IMemoryCache Cache
@inherits AuthenticatedPageBase

<PageTitle>Home</PageTitle>

<h1>Palettes</h1>

<h2>あなたのスタンプパレット</h2>
@if (UserStampPalettes is not null)
{
    foreach (var sp in UserStampPalettes)
    {
        <div class="inline-block border-1 border-solid border-gray-7">
            <h3 class="hover:cursor-pointer hover:underline">
                <a href="@($"./stamp-palettes/{sp.Id}")">@sp.Name</a>
            </h3>
            <span>
                @foreach (var s in sp.Stamps.Take(20))
                {
                    <TraqStampImg TraqApiBaseUrl="@TraqClientOptions.Value.ApiBaseAddress"
                    StampId="@s"
                    StampApi="@TraqStampApi" />
                }
            </span>
        </div>
    }
}

<h2>みんなのスタンプパレット</h2>
@if (PublicStampPalettes is not null)
{
    foreach (var (sp, qsp) in PublicStampPalettes)
    {
        <div class="inline-block border-1 border-solid border-gray-7">
            <h3 class="hover:cursor-pointer hover:underline">
                <a href="@($"./stamp-palettes/{sp.Id}")">@qsp.Name</a>
            </h3>
            <span>
                @foreach (var s in qsp.Stamps.Take(20))
                {
                    <TraqStampImg TraqApiBaseUrl="@TraqClientOptions.Value.ApiBaseAddress"
                                  StampId="@s"
                                  StampApi="@TraqStampApi" />
                }
            </span>
        </div>
    }
}

@code {
    List<Traq.Model.StampPalette>? UserStampPalettes = null;

    List<(Domain.Models.StampPalette, Traq.Model.StampPalette)>? PublicStampPalettes = null;

    Traq.Api.StampApi? TraqStampApi = null;

    protected override async Task OnInitializedAsync()
    {
        var client = await CreateTraqAuthenticatedHttpClientAsync();
        if (client is null)
        {
            return;
        }

        TraqStampApi = new(client);
        UserStampPalettes = await TraqStampApi.GetStampPalettesAsync();

        await using var repo = await RepositoryFactory.CreateRepositoryAsync(default);
        PublicStampPalettes = await (await repo.GetPublicStampPalettesAsync(default))
            .ToAsyncEnumerable()
            .SelectAwait(async p => (p, await TraqStampApi.GetStampPaletteAsync(p.Id)))
            .ToListAsync();
    }
}
