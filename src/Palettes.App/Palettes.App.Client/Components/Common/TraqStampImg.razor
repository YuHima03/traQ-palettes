@inject IMemoryCache Cache

@if (StampId != Guid.Empty && StampName is not null)
{
    <i class="inline-block overflow-hidden bg-center bg-no-repeat bg-contain align-middle"
       style="width: @(Width)px; height: @(Height)px; background-image: url(@GetStampImageUri("https://q.trap.jp/api/v3/", StampId));"
       title="@StampName"></i>
}
else
{
    <i class="inline-block overflow-hidden bg-center bg-no-repeat bg-contain align-middle"
       style="width: @(Width)px; height: @(Height)px; background-image: url(@GetStampImageUri(StampApi.Configuration.BasePath, Stamp?.Id ?? Guid.Empty));"
       title="@Stamp?.Name"></i>
}

@code {
    [CascadingParameter]
    public required Traq.Api.IStampApiAsync StampApi { get; set; }

    [Parameter]
    public Guid StampId { get; set; }

    [Parameter]
    public string? StampName { get; set; }

    [Parameter]
    public int Width { get; set; } = 24;

    [Parameter]
    public int Height { get; set; } = 24;

    Traq.Model.Stamp? Stamp;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Stamp = await GetStampAsync();
        }
        catch
        {
            Stamp = null;
        }
    }

    ValueTask<Traq.Model.Stamp> GetStampAsync()
    {
        if (StampApi is null)
        {
            throw new InvalidOperationException("StampApi must be provided when StampFileId is not set.");
        }
        else if (StampId == Guid.Empty)
        {
            if (StampName is null)
            {
                throw new InvalidOperationException("StampName must be provided when StampId is not set.");
            }
            return StampApi.GetCachedStampAsync(Cache, StampName);
        }
        else
        {
            return StampApi.GetCachedStampAsync(Cache, StampId);
        }
    }

    static string GetStampImageUri(string traqApiBaseUri, Guid stampId)
    {
        var apiBaseUrl = traqApiBaseUri.AsSpan().TrimEnd('/');
        return apiBaseUrl.EndsWith("v3")
            ? $"{apiBaseUrl[..^2]}1.0/public/emoji/{stampId}"
            : $"{apiBaseUrl}/public/emoji/{stampId}";
    }
}


