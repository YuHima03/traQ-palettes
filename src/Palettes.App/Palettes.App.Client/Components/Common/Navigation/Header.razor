@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<header class="w-full h-[4rem] px-6 flex flex-row gap-x-6 items-center justify-between bg-bg-default-secondary">

    <div class="flex flex-row gap-x-8 items-center">

        <h1 class="hidden md:inline-block">
            <a class="inline tx-h2 hover:cursor-pointer hover:text-default-secondary" href="/">
                Q-Palettes
            </a>
        </h1>

        <div class="flex flex-row gap-x-6">

            <NavLink href="/"
                     class="tx-button py-2 hover:opacity-80
                            [&.active]:text-note-primary [&.active]:border-b-2 [&.active]:border-tx-note-primary"
                     Match="NavLinkMatch.All">
                ホーム
            </NavLink>

            <NavLink href="/subscriptions"
                     class="tx-button py-2 hover:opacity-80
                            [&.active]:text-note-primary [&.active]:border-b-2 [&.active]:border-tx-note-primary"
                     Match="NavLinkMatch.All">
                お気に入り
            </NavLink>

        </div>

    </div>
    @if (LoggedInUsername is not null)
    {
        <span class="w-fit h-fit rounded-full overflow-hidden">
            <TraqUserIcon TraqApiBaseUri="https://q.trap.jp/api/v3/"
                          Username="@LoggedInUsername"
                          Width="40"
                          Height="40" />
        </span>
    }

</header>

@code {
    string? LoggedInUsername = null;

    string RelativePath = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity is { IsAuthenticated: true })
        {
            LoggedInUsername = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;
        }
        RelativePath = Navigation.ToBaseRelativePath(Navigation.Uri);
    }
}
