@page "/stamp-palettes/{PaletteId:guid}"
@inherits AuthenticatedPageBase
@rendermode InteractiveWebAssembly

<div class="flex flex-col gap-y-6">
    @if (StampPalette is null)
    {
        <p>
            読み込み中...
        </p>
    }
    else
    {
        <div class="flex flex-row flex-nowrap gap-x-3 shrink-0 items-center">

            <div class="flex flex-row gap-x-3 grow items-center">
                @if (string.IsNullOrWhiteSpace(StampPalette.Name))
                {
                    <h1 class="font-normal text-default-tertiary">
                        名称なし
                    </h1>
                }
                else
                {
                    <h1>
                        @StampPalette.Name
                    </h1>
                }

                @if (StampPalette is not { IsPublic: true })
                {
                    <span class="tx-caption text-default-secondary px-1 py-0.5 border-1 border-default-primary rounded-sm">
                        非公開
                    </span>
                }
            </div>

            @if (StampPalette.Creator.Id == LoggedInUserId)
            {
                if (StampPalette is not { IsPublic: true })
                {
                    <Button IsDisabled="!PrimaryButtonIsEnabled">
                        <span class="tx-button">
                            公開する
                        </span>
                    </Button>
                }
                else
                {
                    <Button Type="Button.ButtonType.Danger" IsDisabled="!PrimaryButtonIsEnabled">
                        <span class="tx-button text-inherit">
                            非公開にする
                        </span>
                    </Button>
                }
            }
            else
            {
                if (!UserSubscribes)
                {
                    <Button OnClickCallback="TrySubscribeAsync" IsDisabled="!PrimaryButtonIsEnabled">
                        <span class="tx-button">
                            お気に入りに追加
                        </span>
                    </Button>
                }
                else
                {
                    <Button OnClickCallback="TryUnsubscribeAsync" Type="Button.ButtonType.Danger" IsDisabled="!PrimaryButtonIsEnabled">
                        <span class="tx-button text-inherit">
                            お気に入り解除
                        </span>
                    </Button>
                }
            }

        </div>

        <div class="flex flex-col gap-4">
            <_PropertyListItem>
                <Label>
                    制作者
                </Label>
                <Value>
                    <div class="flex flex-row gap-x-2 items-center">
                        <span class="size-fit rounded-full overflow-hidden">
                            <TraqUserIcon TraqApiBaseUri="https://q.trap.jp/api/v3/"
                                          Username="@StampPalette.Creator.Name"
                                          Width="24"
                                          Height="24" />
                        </span>
                        <p>
                            @StampPalette.Creator.Name
                        </p>
                    </div>
                </Value>
            </_PropertyListItem>

            <_PropertyListItem>
                <Label>
                    説明
                </Label>
                <Value>
                    @if (string.IsNullOrWhiteSpace(StampPalette.Description))
                    {
                        <p class="text-default-tertiary">説明なし</p>
                    }
                    else
                    {
                        <div class="flex flex-col gap-y-2">
                            @foreach (var para in ToParagraphs(StampPalette.Description))
                            {
                                <p>
                                    @para
                                </p>
                            }
                        </div>
                    }
                </Value>
            </_PropertyListItem>

            <_PropertyListItem>
                <Label>
                    スタンプ (@(StampPalette.Stamps.Length)個)
                </Label>
                <Value>
                    <div class="flex flex-row flex-wrap gap-1">
                        @foreach (var s in StampPalette.Stamps)
                        {
                            <TraqStampImg StampId="@s.Id" StampName="@s.Name" />
                        }
                    </div>
                </Value>
            </_PropertyListItem>

            @if (StampPalette is { IsPublic: true })
            {
                <_PropertyListItem>
                    <Label>
                        お気に入り登録者
                    </Label>
                    <Value>
                        @(StampPalette.Subscriptions.Length)人
                    </Value>
                </_PropertyListItem>
            }

            <_PropertyListItem>
                <Label>
                    短縮ID
                </Label>
                <Value>
                    @(SimpleBase.Base58.Bitcoin.Encode(PaletteId.ToByteArray()))
                </Value>
            </_PropertyListItem>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid PaletteId { get; set; }

    Guid LoggedInUserId => User?.Id ?? Guid.Empty;

    bool PrimaryButtonIsEnabled = true;

    Api.StampPaletteApi.GetStampPaletteResult? StampPalette;

    bool UserSubscribes = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var apiClient = await ApiClientFactory.CreateApiClientAsync();
        var stampPalettes = await apiClient.GetStampPaletteAsync(PaletteId);
        if (!stampPalettes.IsSuccessStatusCode)
        {
            throw new Exception($"Failed to load stamp palette.");
        }
        StampPalette = stampPalettes.Result;
        if (StampPalette is not null)
        {
            UserSubscribes = StampPalette.Subscriptions.Any(s => s.User.Id == LoggedInUserId);
        }
    }

    static IEnumerable<string> ToParagraphs(string text)
    {
        int lineStart = 0;
        int paraStart = 0;
        for (int i = 0; i < text.Length; i++)
        {
            if (text[i] == '\n')
            {
                if (text.AsSpan()[lineStart..i].IsWhiteSpace())
                {
                    yield return text[paraStart..lineStart];
                    paraStart = i + 1;
                }
                lineStart = i + 1;
            }
        }
        yield return text[paraStart..];
        yield break;
    }

    async void TrySubscribeAsync()
    {
        if (!Interlocked.Exchange(ref PrimaryButtonIsEnabled, false))
        {
            return;
        }
        try
        {
            var apiClient = await ApiClientFactory.CreateApiClientAsync();
            await apiClient.PostStampPalletSubscriptionAsync(PaletteId);
            await TryUpdateStampPaletteAsync();
        }
        catch { }
        PrimaryButtonIsEnabled = true;
        StateHasChanged();
    }

    async void TryUnsubscribeAsync()
    {
        if (!Interlocked.Exchange(ref PrimaryButtonIsEnabled, false))
        {
            return;
        }
        try
        {
            var apiClient = await ApiClientFactory.CreateApiClientAsync();
            await apiClient.DeleteStampPaletteSubscriptionAsync(PaletteId);
            await TryUpdateStampPaletteAsync();
        }
        catch { }
        PrimaryButtonIsEnabled = true;
        StateHasChanged();
    }

    async ValueTask TryUpdateStampPaletteAsync()
    {
        var apiClient = await ApiClientFactory.CreateApiClientAsync();
        var result = await apiClient.GetStampPaletteAsync(PaletteId);
        if (result.IsSuccessStatusCode)
        {
            StampPalette = result.Result;
            UserSubscribes = StampPalette?.Subscriptions.Any(s => s.User.Id == LoggedInUserId) ?? false;
        }
    }
}
